// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: template.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShareSendingService_SendShare_FullMethodName = "/proto.ShareSendingService/SendShare"
)

// ShareSendingServiceClient is the client API for ShareSendingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShareSendingServiceClient interface {
	SendShare(ctx context.Context, in *Share, opts ...grpc.CallOption) (*Acknowledge, error)
}

type shareSendingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShareSendingServiceClient(cc grpc.ClientConnInterface) ShareSendingServiceClient {
	return &shareSendingServiceClient{cc}
}

func (c *shareSendingServiceClient) SendShare(ctx context.Context, in *Share, opts ...grpc.CallOption) (*Acknowledge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Acknowledge)
	err := c.cc.Invoke(ctx, ShareSendingService_SendShare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShareSendingServiceServer is the server API for ShareSendingService service.
// All implementations must embed UnimplementedShareSendingServiceServer
// for forward compatibility.
type ShareSendingServiceServer interface {
	SendShare(context.Context, *Share) (*Acknowledge, error)
	mustEmbedUnimplementedShareSendingServiceServer()
}

// UnimplementedShareSendingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShareSendingServiceServer struct{}

func (UnimplementedShareSendingServiceServer) SendShare(context.Context, *Share) (*Acknowledge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendShare not implemented")
}
func (UnimplementedShareSendingServiceServer) mustEmbedUnimplementedShareSendingServiceServer() {}
func (UnimplementedShareSendingServiceServer) testEmbeddedByValue()                             {}

// UnsafeShareSendingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShareSendingServiceServer will
// result in compilation errors.
type UnsafeShareSendingServiceServer interface {
	mustEmbedUnimplementedShareSendingServiceServer()
}

func RegisterShareSendingServiceServer(s grpc.ServiceRegistrar, srv ShareSendingServiceServer) {
	// If the following call pancis, it indicates UnimplementedShareSendingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShareSendingService_ServiceDesc, srv)
}

func _ShareSendingService_SendShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Share)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareSendingServiceServer).SendShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShareSendingService_SendShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareSendingServiceServer).SendShare(ctx, req.(*Share))
	}
	return interceptor(ctx, in, info, handler)
}

// ShareSendingService_ServiceDesc is the grpc.ServiceDesc for ShareSendingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShareSendingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ShareSendingService",
	HandlerType: (*ShareSendingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendShare",
			Handler:    _ShareSendingService_SendShare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "template.proto",
}

const (
	AggregationSendingService_SendAggregation_FullMethodName = "/proto.AggregationSendingService/SendAggregation"
)

// AggregationSendingServiceClient is the client API for AggregationSendingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AggregationSendingServiceClient interface {
	SendAggregation(ctx context.Context, in *Aggregation, opts ...grpc.CallOption) (*Acknowledge, error)
}

type aggregationSendingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAggregationSendingServiceClient(cc grpc.ClientConnInterface) AggregationSendingServiceClient {
	return &aggregationSendingServiceClient{cc}
}

func (c *aggregationSendingServiceClient) SendAggregation(ctx context.Context, in *Aggregation, opts ...grpc.CallOption) (*Acknowledge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Acknowledge)
	err := c.cc.Invoke(ctx, AggregationSendingService_SendAggregation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregationSendingServiceServer is the server API for AggregationSendingService service.
// All implementations must embed UnimplementedAggregationSendingServiceServer
// for forward compatibility.
type AggregationSendingServiceServer interface {
	SendAggregation(context.Context, *Aggregation) (*Acknowledge, error)
	mustEmbedUnimplementedAggregationSendingServiceServer()
}

// UnimplementedAggregationSendingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAggregationSendingServiceServer struct{}

func (UnimplementedAggregationSendingServiceServer) SendAggregation(context.Context, *Aggregation) (*Acknowledge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAggregation not implemented")
}
func (UnimplementedAggregationSendingServiceServer) mustEmbedUnimplementedAggregationSendingServiceServer() {
}
func (UnimplementedAggregationSendingServiceServer) testEmbeddedByValue() {}

// UnsafeAggregationSendingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AggregationSendingServiceServer will
// result in compilation errors.
type UnsafeAggregationSendingServiceServer interface {
	mustEmbedUnimplementedAggregationSendingServiceServer()
}

func RegisterAggregationSendingServiceServer(s grpc.ServiceRegistrar, srv AggregationSendingServiceServer) {
	// If the following call pancis, it indicates UnimplementedAggregationSendingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AggregationSendingService_ServiceDesc, srv)
}

func _AggregationSendingService_SendAggregation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Aggregation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregationSendingServiceServer).SendAggregation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AggregationSendingService_SendAggregation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregationSendingServiceServer).SendAggregation(ctx, req.(*Aggregation))
	}
	return interceptor(ctx, in, info, handler)
}

// AggregationSendingService_ServiceDesc is the grpc.ServiceDesc for AggregationSendingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AggregationSendingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AggregationSendingService",
	HandlerType: (*AggregationSendingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendAggregation",
			Handler:    _AggregationSendingService_SendAggregation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "template.proto",
}
